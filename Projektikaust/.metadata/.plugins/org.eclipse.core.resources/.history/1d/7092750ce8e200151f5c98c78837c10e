package mainPackage;
import java.util.Random;

public class Referee {

	// Kohtunikul on viited malelauale ja mängijatele
	Malelaud_2 gameBoard;
	Player whitePlayer, blackPlayer;
	byte gameNr, turn;
	String color, th1, th2, lastMove;
	int nr1, nr2;
	boolean endReached = false, enPassant;
	
	//Konstruktor
	public Referee(Malelaud_2 board, Player white, Player black ){
		gameBoard = board;
		whitePlayer = white;
		blackPlayer = black;
		gameNr = 0;
		turn = 1;//(byte)new Random().nextInt(2);
		switch (turn)
		{
			case 0: color = "m"; break;
			case 1: color = "v"; break;
		}
	}
	
	
	////Mõned lühendatud teisendusmeetodid
	//
	//char-2-String teisendus
	private String chstr(String str, int i){
		return Character.toString(str.charAt(i));
	}
	
	//char-2-int teisendus
	private int chint(String str, int i){
		return Character.getNumericValue(str.charAt(i));
	}
	
	//Tähe indeks reas "ABCDEFGH"
	private int letterVal(String s){
		return gameBoard.tahehoius.indexOf(s);
	}
	
	
	
	////Järgnevad 7 meetodit on käigu õigsusekontrolli sammud nende rakendamise järjekorras. 
	//
	//
	//Abikontroll, mis teeb kindlaks, kas tegemist on erandliku olukorraga. 
	private void checkEnPassant() 
	{
		if ( 	Math.abs(chint(lastMove, 1) - chint(lastMove, 3)) == 2 
				 &&	Math.abs(letterVal(chstr(lastMove, 2)) - letterVal(th1)) == 1)
			{
				if ((turn==1 && nr1 - chint(lastMove, 3) == 1) ||
					(turn==0 && chint(lastMove, 3) - nr1 == 1))		enPassant = true;
			}
	}
	//
	//Kõigepealt kontrollitakse sisendi süntaktilist korrektsust
	private boolean isCorrectFormat(String input){
		if (input.length() != 4) return false; 
		else if (!input.matches("[a-hA-H][1-8][a-hA-H][1-8]")) {say("Sisend ebakorrektne!");return false;}
		else if (input.charAt(0) == input.charAt(2) && input.charAt(1) == input.charAt(3)) {say("Ei tohi käia samale ruudule!");return false;}
		return true;
	}
	//
	//Seejärel kontrollitakse, kas vaadeldav ettur on käiva mängija oma. 
	private boolean isMyPawn()
	{				
		if (gameBoard.getPawn(th1, nr1-1) != color) {say("Käia tohib ainult oma etturiga. Teie omad on tähistatud "+color+"-tähega.");return false;}
		return true;
	}
	//
	//Siis kontrollitakse, kas sihtruudul juba on sama värvi ettur.
	private boolean isSquareOccupied(){
		String square = gameBoard.getPawn(th2, nr2-1);
		if (square == color) {say("Sihtruudul juba on teie ettur.");return true;} 
		return false;
	}
	//
	//Tehakse kindlaks, kas tegemist on rünnaku või tavalise liikumisega. 
	private boolean isAttackMove(){
		String square = gameBoard.getPawn(th2, nr2-1);		
		if (square != "-") {say("Tegemist on rünnakuga");return true;}
		return false;
	}
	//
	//Rünnaku korral kontrollitakse selle legaalsust. 
	private boolean isLegalAttack(){
		if (Math.abs(letterVal(th2)-letterVal(th1)) != 1) return false;
		
		
		if (turn == 0 && 
				((!enPassant && nr2 > nr1) && nr1-nr2 == 1))
		{
			if (whitePlayer.getPawnsLeft()==0) {endReached = true; blackPlayer.wonTheMatch();}
			return true;
		}
		if (turn == 1 && 
				((!enPassant && nr2 > nr1) && nr2-nr1 == 1)) 
		{
			if (blackPlayer.getPawnsLeft()==0) {endReached = true; whitePlayer.wonTheMatch();}
			return true;
		}
		say("Sinna ei ole lubatud rünnata!");
		return false;
	}
	//
	//Tavaliikumise korral samuti. Ühtlasi teeb kindlaks, kas ettur on lipuks saanud. 
	private boolean isLegalMove(){
		if (letterVal(th1)!=letterVal(th2)) return false;
		
		if (turn == 0 && (
				nr1 > nr2 && (
						(nr2 != 1 && nr1-nr2 == 1) || nr1-nr2 <= 2) )) 
		{
			if (nr2 == 0) endReached = true;
			blackPlayer.wonTheMatch();
			return true;
		}
		
		if (turn == 1 && (
				nr2 > nr1 && (
						(nr1 != 1 && nr2-nr1 == 1) || nr2-nr1 <= 2) )) 
		{
			if (nr2 == 7) endReached = true;
			whitePlayer.wonTheMatch();
			return true;
		}
		
		say("Sinna ei ole lubatud käia!");
		return false;
	}

	
	//Peamine meetod, mille kaudu kohtunik kontrollib, kas kasutaja poolt
	//sisestatud käik on lubatud. Tegevus koosneb mitmest sammust. 
	//Kui kontrolli käigus üks samm nurjub, siis ei ole käik võimalik. 
	public boolean Assess(String input) 
	{
		th1 = chstr(input, 0);
		nr1 = chint(input, 1);
		th2 = chstr(input, 2);
		nr2 = chint(input, 3);
		
		if (lastMove != null) checkEnPassant();
		
		if (!isCorrectFormat(input) || 
			!isMyPawn() || 
			isSquareOccupied()) return false;
		
		if (isAttackMove() && isLegalAttack()) 
		{
			//TODO!
			//gameBoard.liigutus(input)
			switch(turn)
			{
				case 0: whitePlayer.pawnKilled(); break;
				case 1: blackPlayer.pawnKilled(); break;
			}
			lastMove = input;
			return true;
		} 
		if (!isAttackMove() && isLegalMove()) 
		{
			//TODO!
			//gameBoard.liigutus(input)
			lastMove = input;
			return true;
		}
		return false;
	}
	
	public void nextTurn(){
		turn = (byte)((turn + 1) % 2);
		switch (turn)
		{
			case 0: color = "m"; break;
			case 1: color = "v"; break;
		}
	}

	public boolean gameOver()
	{
		if (endReached) return true;
		
		return false;
	}

	public void say(String sentence) 
	{
		System.out.println(sentence);
	}
}
