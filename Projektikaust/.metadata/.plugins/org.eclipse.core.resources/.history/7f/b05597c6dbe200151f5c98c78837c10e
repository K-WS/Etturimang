package mainPackage;
import java.util.Random;

public class Referee {

	Malelaud_2 gameBoard;
	Player whitePlayer, blackPlayer;
	byte gameNr, turn;
	String color, th1, th2;
	int nr1, nr2;
	
	public Referee(Malelaud_2 board, Player white, Player black ){
		gameBoard = board;
		whitePlayer = white;
		blackPlayer = black;
		gameNr = 0;
		turn = (byte)new Random().nextInt(2);
		switch (turn)
		{
			case 0: color = "m"; break;
			case 1: color = "v"; break;
		}
	}
	
	//Kiire char-2-String teisendus
	private String chstr(String str, int i){
		return Character.toString(str.charAt(i));
	}
	
	//Kiire char-2-int teisendus
	private int chint(String str, int i){
		return Character.getNumericValue(str.charAt(i));
	}
	
	//Tähe indeksi reas "ABCDEFGH"
	private int letterVal(String s){
		return gameBoard.tahehoius.indexOf(s);
	}
	
	private boolean isCorrectFormat(String input){
		if (input.length() != 4) return false; 
		else if (!input.matches("[a-hA-H][1-8][a-hA-H][1-8]")) return false;
		else if (input.charAt(0) == input.charAt(2) && input.charAt(1) == input.charAt(3)) return false;
		return true;
	}
	
	private boolean isMyPawn()
	{				
		if (gameBoard.getPawn(th1, nr1) != color) return false;
		return true;
	}
	
	private boolean isSquareOccupied(){
		String square = gameBoard.getPawn(th2, nr2);
		if (square == color) return true; 
		return false;
	}
	
	private boolean isAttackMove(){
		String square = gameBoard.getPawn(th2, nr2);		
		if (square != "-") return true;
		return false;
	}
	
	private boolean isLegalAttack(){
		if (Math.abs(letterVal(th2)-letterVal(th1)) != 1) return false;
		if (turn == 0 && 
				(nr2 < nr1 || nr2-nr1 > 1)) return false;   
		if (turn == 1 && 
				(nr2 > nr1 || nr1-nr2 > 1)) return false; 
		return true;
	}
	
	private boolean isLegalMove(){
		if (letterVal(th1)!=letterVal(th2)) return false;
		
		if (turn == 0 && (
				nr2 < nr1 || 
				nr2-nr1 > 2 || 
				(nr1 != 1 && nr2-nr1 != 1) )) return false;
		
		if (turn == 1 && (
				nr2 > nr1 || 
				nr1-nr2 > 2 || 
				(nr2 != 1 && nr1-nr2 != 1) )) return false;
		
		return true;
	}
	
	public boolean Assess(String input) 
	{
		th1 = chstr(input, 0);
		nr1 = chint(input, 1);
		th2 = chstr(input, 2);
		nr2 = chint(input, 3);
		
		if (!isCorrectFormat(input) || 
			!isMyPawn() || 
			!isLegalMove() || ) 
			return false;
		
		
		return true;
	}
	
	public void nextTurn(){
		turn = (byte)((turn + 1) % 2);
		switch (turn)
		{
			case 0: color = "m"; break;
			case 1: color = "v"; break;
		}
	}
}
